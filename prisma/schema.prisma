

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserRole {
  DOCTOR
  PATIENT
  ADMIN
}

model User {
  id        String   @id @default(uuid())
  email     String   @unique
  password  String
  role      UserRole
  doctor    Doctor?
  admin     Admin?
  patient   Patient?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("users")
}

model Doctor {
  id             String         @id @default(uuid())
  name           String
  specialization String
  user           User           @relation(fields: [userId], references: [id])
  userId         String         @unique
  appointments   Appointment[]
  prescriptions  Prescription[]
  medicalHistory MedicalHistory[]
  createdAt      DateTime       @default(now())
  updatedAt      DateTime       @updatedAt

  @@map("doctors")
}

model Admin {
  id        String   @id @default(uuid())
  name      String
  user      User     @relation(fields: [userId], references: [id])
  userId    String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("admins")
}

model Patient {
  id             String         @id @default(uuid())
  name           String
  dateOfBirth    DateTime
  address        String
  user           User           @relation(fields: [userId], references: [id])
  userId         String         @unique
  appointments   Appointment[]
  prescriptions  Prescription[]
  medicalHistory MedicalHistory[]
  createdAt      DateTime       @default(now())
  updatedAt      DateTime       @updatedAt

  @@map("patients")
}

model Appointment {
  id        String   @id @default(uuid())
  dateAndTime      DateTime
  reason    String
  patient   Patient  @relation(fields: [patientId], references: [id])
  patientId String
  doctor    Doctor   @relation(fields: [doctorId], references: [id])
  doctorId  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("appointments")
}

model Prescription {
  id          String   @id @default(uuid())
  medication  String
  dosage      String
  frequency   String
  startDate   DateTime
  endDate     DateTime
  patient     Patient  @relation(fields: [patientId], references: [id])
  patientId   String
  doctor      Doctor   @relation(fields: [doctorId], references: [id])
  doctorId    String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@map("prescriptions")
}

model MedicalHistory {
  id          String   @id @default(uuid())
  diagnosis   String
  treatment   String
  notes       String?
  patient     Patient  @relation(fields: [patientId], references: [id])
  patientId   String
  doctor      Doctor   @relation(fields: [doctorId], references: [id])
  doctorId    String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@map("medical_histories")
}